"""
Django settings for pong_project project.

Generated by 'django-admin startproject' using Django 5.1.4.
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv  

# ------------------------------------------------------------------
# 1) Répertoire de base du projet
# ------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# Charger les variables d'environnement depuis le fichier .env
load_dotenv(os.path.join(BASE_DIR, '.env'))

# ------------------------------------------------------------------
# 2) Clés de sécurité & Debug
# ------------------------------------------------------------------
# Récupère la clé secrète depuis l'environnement
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    raise Exception("La variable d'environnement SECRET_KEY n'est pas définie.")

# DEBUG est récupéré depuis l'environnement
DEBUG_ENV = os.environ.get("DEBUG")
if DEBUG_ENV is None:
    raise Exception("La variable d'environnement DEBUG n'est pas définie.")
DEBUG = DEBUG_ENV.lower() in ("true", "1", "yes")

# ------------------------------------------------------------------
# 3) Hôtes autorisés
# ------------------------------------------------------------------
ALLOWED_HOSTS_ENV = os.environ.get('ALLOWED_HOST')
if not ALLOWED_HOSTS_ENV:
    raise Exception("La variable d'environnement ALLOWED_HOST n'est pas définie.")
ALLOWED_HOSTS = ALLOWED_HOSTS_ENV.split(',')

# ------------------------------------------------------------------
# 4) Authentification utilisateur
# ------------------------------------------------------------------
AUTH_USER_MODEL = 'accounts.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8, 
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ------------------------------------------------------------------
# 5) Internationalisation & Localisation
# ------------------------------------------------------------------
LANGUAGE_CODE = 'fr'

LANGUAGES = [
    ('fr', 'Français'),
    ('en', 'English'),
    ('es', 'Español'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',  
]

TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True
USE_TZ = True

# ------------------------------------------------------------------
# 6) Applications installées
# ------------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'widget_tweaks',
    'channels',

    'accounts',
    'core',
    'game',
]

# ------------------------------------------------------------------
# 7) Middlewares
# ------------------------------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware', 
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'pong_project.middleware.JWTAuthenticationMiddleware', 
]

# ------------------------------------------------------------------
# 8) URL configuration
# ------------------------------------------------------------------
ROOT_URLCONF = 'pong_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'), 
        ],
        'APP_DIRS': True,  
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n', 
            ],
        },
    },
]

WSGI_APPLICATION = 'pong_project.wsgi.application'
ASGI_APPLICATION = 'pong_project.asgi.application'  

# ------------------------------------------------------------------
# 9) Sécurité & HTTPS (Nginx en reverse proxy)
# ------------------------------------------------------------------

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Nginx already manage redir HTTP->HTTPS 
SECURE_SSL_REDIRECT = False

# Cookies HTTPS only
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# ------------------------------------------------------------------
# 10) CSRF
# ------------------------------------------------------------------
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8080',
    'https://localhost:8443',
]
host = os.environ.get('ALLOWED_HOST')
if not host:
    raise Exception("La variable d'environnement ALLOWED_HOST n'est pas définie.")
CSRF_TRUSTED_ORIGINS.append(f"https://{host}:8443")
CSRF_COOKIE_SAMESITE = 'Lax'

# ------------------------------------------------------------------
# 11) Base de données (PostgreSQL)
# ------------------------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST'),
        'PORT': os.environ.get('POSTGRES_PORT'),
    }
}

# ------------------------------------------------------------------
# 12) Moteur de sessions
# ------------------------------------------------------------------
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_HTTPONLY = True

# ------------------------------------------------------------------
# 13) Cache (Redis) & Channels
# ------------------------------------------------------------------
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{os.environ.get('REDIS_HOST')}:{os.environ.get('REDIS_PORT')}/1",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                (
                    os.environ.get("REDIS_HOST"),
                    int(os.environ.get("REDIS_PORT"))
                )
            ],
        },
    },
}

# ------------------------------------------------------------------
# 14) Gestion des fichiers statiques & médias
# ------------------------------------------------------------------
STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ------------------------------------------------------------------
# 15) Autres
# ------------------------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# URL de connexion (redirection pour les utilisateurs anonymes)
LOGIN_URL = '/home/'

# ------------------------------------------------------------------
# 16) Exposer la configuration Redis pour d'autres modules
# ------------------------------------------------------------------
REDIS_HOST = os.environ.get("REDIS_HOST")
REDIS_PORT = int(os.environ.get("REDIS_PORT"))